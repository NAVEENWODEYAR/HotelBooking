package com.hotelbookings.security;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

//import com.hotelbookings.security.jwt.AuthTokenFilter;
//import com.hotelbookings.security.jwt.JwtAuthEntryPoint;
import com.hotelbookings.security.user.HotelUserDetailsService;

import lombok.RequiredArgsConstructor;


@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
//@EnableMethodSecurity(securedEnabled = true, jsr250Enabled = true, prePostEnabled = true)
public class WebSecurityConfig {
	
	@Autowired
    private final HotelUserDetailsService userDetailsService;
//    private final JwtAuthEntryPoint jwtAuthEntryPoint;
//
//    @Bean
//    public AuthTokenFilter authenticationTokenFilter(){
//        return new AuthTokenFilter();
//    }
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        var authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

//    @Bean
//    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//        return http.csrf.disable().    //(AbstractHttpConfigurer :: disable)
////                .exceptionHandling(
////                        exception -> exception.authenticationEntryPoint(jwtAuthEntryPoint))
////                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
//                .authorizeHttpRequests()  //auth -> auth
//                        .requestMatchers("/rooms/**","/bookings/**")  //"/auth/**", 
//                        .permitAll().requestMatchers("/roles/**").hasRole("ADMIN")
//                        .anyRequest().authenticated());
//        http.authenticationProvider(authenticationProvider());
////        http.addFilterBefore(authenticationTokenFilter(), UsernamePasswordAuthenticationFilter.class);
//         http.build();
//    }
    

    public class SpringConfig {
    	public SecurityFilterChain securityFilterChain(HttpSecurity http)throws Exception {
    		
    		
    		 return http.csrf().disable().authorizeHttpRequests()
    				 .requestMatchers("/rooms/**","/bookings/**").permitAll()
//    				 .and()
//    				  .authorizeHttpRequests()
    				 .requestMatchers("/roles/**").authenticated()
    				 .and().build();

    	   }
    }
}