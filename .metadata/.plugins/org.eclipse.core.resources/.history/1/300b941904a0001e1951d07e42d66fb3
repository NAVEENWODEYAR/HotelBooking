package com.hotelbookings.service;

import java.util.List;
import java.util.Optional;

import org.springframework.security.core.userdetails.UsernameNotFoundException;

import com.hotelbookings.exception.RoleAlreadyExistException;
import com.hotelbookings.exception.UserAlreadyExistsException;
import com.hotelbookings.model.Role;
import com.hotelbookings.model.User;
import com.hotelbookings.repository.RoleRepository;
import com.hotelbookings.repository.UserRepository;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public class RoleService implements IRoleService {
	
	private final RoleRepository roleRepository;
	
	private final UserRepository userRepository;

	@Override
	public List<Role> getRoles() {
		
		return roleRepository.findAll();
	}

	@Override
	public Role createRole(Role theRole) {
		String roleName = "ROLE_" + theRole.getName().toUpperCase();
		Role role = new Role(roleName);
		if(roleRepository.existsByName(role)) {
			throw new RoleAlreadyExistException(theRole.getName()+"role already exists");
		}
		return roleRepository.save(role);
	}

	@Override
	public void deleteRole(Long roleId) {
		this.removeAllUsersFromRole(roleId);
		roleRepository.deleteById(roleId);
		
	}

	@Override
	public Role findByName(String name) {
		return roleRepository.findByName(name).get();
	}

	@Override
	public User removeUserFromRole(Long UserId, Long RoleID) {
		Optional<User> user = userRepository.findById(UserId);
		Optional<Role> role = roleRepository.findById(RoleID);
		if(role.isPresent() && role.get().getUsers().contains(user.get())){
			role.get().removeUserFromRole(user.get());
			roleRepository.save(role.get());
			return user.get();
		}
		 throw new UsernameNotFoundException("User Not Found Exception");
	}

	@Override
	public User assignRoleToUser(Long UserId, Long RoleID) {
		Optional<User> user = userRepository.findById(UserId);
		Optional<Role> role = roleRepository.findById(RoleID);
		if(user.isPresent() && user.get().getRoles().contains(role.get())) {
			throw new UserAlreadyExistsException(
					user.get().getFirstName()+"is already assigned to the" + role.get().getName()+ "role");
		}
		if(role.isPresent()) {
			role.get().assignRoleToUser(user.get());
			roleRepository.save(role.get());
		}
		return user.get();
	}

	@Override
	public Role removeAllUsersFromRole(Long roleId) {
		// TODO Auto-generated method stub
		return null;
	}

}
